import { useMemo, useState, useCallback } from "react";
import Head from "next/head";

import { createEditor, Editor, Node } from "slate";
import { Slate, Editable, withReact } from "slate-react";
import { withHistory } from "slate-history";

import checkPalindrome from "@/lib/checkPalindrome";

export default function Home() {
  const editor = useMemo(() => withReact(withHistory(createEditor())), []);
  const [value, setValue] = useState([
    {
      type: "paragraph",
      children: [{ text: "abobrinha" }],
    },
  ]);

  const decorate = useCallback(([node, path]) => {
    let ranges = [];

    if (
      editor.palindrome &&
      editor.palindrome.center &&
      Editor.isEditor(node)
    ) {
      const [pos1, pos2] = editor.palindrome.center;

      if (pos1)
        ranges.push({
          anchor: pos1,
          focus: Editor.after(editor, pos1),
          center1: true,
        });

      if (pos2)
        ranges.push({
          anchor: pos2,
          focus: Editor.after(editor, pos2),
          center2: true,
        });
    }

    return ranges;
  }, []);

  const onChange = (newValue) => {
    setValue(newValue);

    const textNodes = [...Node.texts(editor)];
    const texts = textNodes.map((node) => node[0].text);
    const text = texts.join("\n");

    const start = Editor.start(editor, []);
    const end = Editor.end(editor, [textNodes.length - 1]);
    const positions = [
      ...Editor.positions(editor, { at: { anchor: start, focus: end } }),
    ];

    // { isPalindrome, mirror, center, normalizedText }
    const palindorme = checkPalindrome(text);

    const center = palindorme.center.map((pos) =>
      pos ? positions[pos] : undefined
    );

    editor.palindrome = { isPalindrome: palindorme.isPalindrome, center };
  };

  return (
    <div>
      <Head>
        <title>Palindromaker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="m-3">
        <h1 className="text-2xl">Palindromaker</h1>

        <Slate editor={editor} value={value} onChange={onChange}>
          <div className="border border-black my-2">
            <Editable
              decorate={decorate}
              renderLeaf={(props) => <Leaf {...props} />}
            />
          </div>
        </Slate>

        <button
          onClick={() => {
            console.log(editor.palindrome);
          }}
        >
          log
        </button>
      </main>
    </div>
  );
}

const Leaf = ({ attributes, children, leaf }) => {
  const className = [
    leaf.center1 ? "bg-red-200 border-r border-black" : "",
    leaf.center2 ? "bg-red-200 border-l border-black" : "",
  ].join(" ");
  return (
    <span {...attributes} className={className}>
      {children}
    </span>
  );
};
